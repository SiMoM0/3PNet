waffleiron: # Architecture of the backbone
  nb_channels: 256  # Define F = the feature size = width of the WaffleIron
  depth: 50         # Define L = the depth on the network
  fov_xyz:          # Define the FOV in meters
    - - -100 # min value on x-axis: -100 m
      - -100 # min value on y-axis: -100 m
      - -2  # min value on z-axis: -5 m
      - 100000
    - - 100  # max value on x-axis: 100 m
      - 100  # max value on y-axis: 100 m
      - 10   # max value on z-axis: 5 m
      - 1000000
  dim_proj:         # Define the sequence of projection (which is then repeated sequentially until \ell = L)
    - 0   # Polar gird
    - 3   # Project along the z axis at \ell = 1 (and then the same at all layer)
    - 2   # At \ell = 2, project along y
    - 1   # At \ell = 1, project along x
    - 0   # Range image
  grids_size:       # Define here the size of the 2D grids
    - [64, 1024]
    - [250, 250]    
    - [250,  12]    
    - [250,  12]
    - [64, 1024]
  drop: 0.2

classif: # Architecture of the classifcation layer, after WaffleIron
  nb_class: 14      # Number of classes on pandaset (after removing the ignore class)

embedding: # Architecture of the embedding layer, before WaffleIron
  input_feat:       # List of features on each point
    - "intensity"
    - "xyz"
    - "radius"
  size_input: 5     # Input feature size on each point
  neighbors: 16     # Neighborhood for embedding layer
  voxel_size: 0.1   # Voxel size for downsampling point cloud in pre-processing

dataloader:
  batch_size: 4
  num_workers: 4
  max_points: 200000

augmentations:
  rotation: 
    - [2, 6]
  flip_xy: null
  scale:
    - [4, 5, 6, 7]
    - 0.1
  instance_cutmix: False # Will apply Cutmix *and* Polarmix
  polarmix: False # Will apply only Polarmix

loss:
  lovasz: 1.0

optim:
  lr: .002
  weight_decay: 0.003

scheduler:
  min_lr: 0.00001
  max_epoch: 45
  epoch_warmup: 4
